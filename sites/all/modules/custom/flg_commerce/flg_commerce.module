<?php

/**
 * implements hook_enable
 */
function flg_commerce_enable() {
  // create tax type
  $gst_tax_type = commerce_tax_type_load('gst');
  $installation_tax_type = commerce_tax_type_load('installation_fee');
  if(empty($gst_tax_type)) {
    $tax_type = commerce_tax_ui_tax_type_new();
    $tax_type['title'] = 'GST';
    $tax_type['name'] = 'gst';
    $tax_type['display_title'] = 'GST';

    commerce_tax_ui_tax_type_save($tax_type);
  }
  if(empty($installation_tax_type)) {
    $tax_type = commerce_tax_ui_tax_type_new();
    $tax_type['title'] = 'Installation Fee';
    $tax_type['name'] = 'installation_fee';
    $tax_type['display_title'] = 'Installation Fee';

    commerce_tax_ui_tax_type_save($tax_type);
  }

  // create tax rate
  $gst_tax_rate = commerce_tax_rate_load('gst');
  $installation_tax_rate = commerce_tax_rate_load('installation_fee');
  if(empty($gst_tax_rate)) {
    $tax_rate = commerce_tax_ui_tax_rate_new();
    $tax_rate['name'] = 'gst';
    $tax_rate['title'] = 'GST';
    $tax_rate['display_title'] = 'GST';
    $tax_rate['rate'] = .1;
    $tax_rate['type'] = 'gst';

    commerce_tax_ui_tax_rate_save($tax_rate);
  }
  if(empty($installation_tax_rate)) {
    $tax_rate = commerce_tax_ui_tax_rate_new();
    $tax_rate['name'] = 'installation_fee';
    $tax_rate['title'] = 'Installation Fee';
    $tax_rate['display_title'] = 'Installation Fee';
    $tax_rate['type'] = 'installation_fee';
    $tax_rate['rate'] = 0;

    commerce_tax_ui_tax_rate_save($tax_rate);
  }
}

/**
 * implements hook_commerce_tax_rate_info_alter()
 */
function flg_commerce_commerce_tax_rate_info_alter(&$tax_rates) {
  $tax_rates['installation_fee']['calculation_callback'] = 'flg_commerce_tax_rate_calculate';
  $tax_rates['gst']['calculation_callback'] = 'flg_commerce_gst_calculate';
}


/**
 * Calculates a price array for the tax on the unit price of a line item.
 *
 * @param $tax_rate
 *   The tax rate array for the tax to calculate.
 * @param $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose unit price should be
 *     used in the tax calculation.
 *
 * @return
 *   The tax price array or FALSE if the tax is already applied.
 */
function flg_commerce_tax_rate_calculate($tax_rate, $line_item_wrapper) {
  global $user;
  $user_id = $user->uid;
  $order = commerce_cart_order_load($user_id);
  $line_item_id = $line_item_wrapper->line_item_id->value();
  $order_data = $order->data;

  if($line_item_wrapper->commerce_product->getBundle() == 'product') {
    if(isset($order_data['installation_fee']) && in_array($line_item_id, $order_data['installation_fee'])) {
      return array(
        'amount' => '8100',
        'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
        'data' => array(
          'tax_rate' => $tax_rate,
        ),
      );
    }
  } else {
    return FALSE;
  }
}

/**
 * Calculates a gst price array for the tax on the unit price of a line item.
 *
 * @param $tax_rate
 *   The tax rate array for the tax to calculate.
 * @param $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose unit price should be
 *     used in the tax calculation.
 *
 * @return
 *   The tax price array or FALSE if the tax is already applied.
 */
function flg_commerce_gst_calculate($tax_rate, $line_item_wrapper) {
  global $user;
  $user_id = $user->uid;
  $order = commerce_cart_order_load($user_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();
  $line_item_id = $line_item_wrapper->line_item_id->value();
  $order_data = $order->data;
  $gst_price = 0;
  $gst_install = 0;

  if($line_item_wrapper->type->value() == 'product') {
    $node_product_id = $line_item_wrapper->value()->data['context']['entity']['entity_id'];
    $node_product = node_load($node_product_id);
    $node_artist_id = $node_product->field_artist['und'][0]['nid'];
    $base_price = $line_item_wrapper->commerce_unit_price->amount->value();

    if($node_artist_id) {
      $node_artist = node_load($node_artist_id);

      if(empty($node_artist->field_shipping_type['und'][0]['value'])) {
        $gst_price =  round($base_price * .1);

        $line_item_wrapper->value()->commerce_unit_price['und'][0]['data']['components'][0]['price']['amount'] = round($base_price * .9);
        $line_item_wrapper->value()->commerce_total['und'][0]['data']['components'][0]['price']['amount'] = round($base_price * .9);
        $line_item_wrapper->commerce_total->amount->set(round($base_price * .9));
      } else {
        $gst_price = 0;
      }
    }

    if(isset($order_data['installation_fee']) && in_array($line_item_id, $order_data['installation_fee'])) {
      $gst_install = 900;
    } else {
      $gst_install = 0;
    }

    $gst = $gst_install + $gst_price;

    if(!empty($gst)) {
      return array(
        'amount' => $gst,
        'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
        'data' => array(
          'tax_rate' => $tax_rate,
        ),
      );
    }
  }
}

/**
 * Implements hook_token_info().
 */
function flg_commerce_token_info() {
  // Site tokens.
  $info['tokens']['site']['logo'] = array(
    'name' => t('Site logo'),
    'description' => t('The image showing the site logo.'),
  );

  $info['tokens']['site']['logo-url'] = array(
    'name' => t('Site logo URL'),
    'description' => t('URL to the image showing the site logo.'),
  );

  $info['tokens']['commerce-order']['products-info'] = array(
    'name' => t('Product Info'),
    'description' => t('Product Info'),
  );

  $info['tokens']['commerce-order']['customer-billing-info'] = array(
    'name' => t('Billing Info'),
    'description' => t('Billing Info'),
  );

  $info['tokens']['commerce-order']['customer-shipping-info'] = array(
    'name' => t('Shipping Info'),
    'description' => t('Shipping Info'),
  );

  $info['tokens']['commerce-order']['payment-short-description'] = array(
    'name' => t('Short Description'),
    'description' => t('Short Description'),
  );

  $info['tokens']['commerce-order']['view-order'] = array(
    'name' => t('Url view order'),
    'description' => t('.'),
  );

  $info['tokens']['commerce-order']['payment-method-information'] = array(
    'name' => t('Payment method information'),
    'description' => t('Payment method information')
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function flg_commerce_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'logo':
          // Use a logo; but only if we have one to use.
          $replacements[$original] = '';
          if ($uri = theme_get_setting('logo')) {
            $replacements[$original] = theme('image', array('path' => $uri));
          }
          break;

        case 'logo-url':
          $replacements[$original] = '';
          if ($uri = theme_get_setting('logo')) {
            $replacements[$original] = $uri;
          }
        break;
      }

      // [site:logo-url:*] chained tokens.
      if ($url_tokens = token_find_with_prefix($tokens, 'logo-url')) {
        $uri = theme_get_setting('logo');
        $replacements += token_generate('url', $url_tokens, array('path' => $uri), $options);
      }
    }
  } elseif ($type == 'commerce-order') {
    try {
      $order = $data['commerce-order'];

      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'products-info':
            $replacements[$original] = '';
            $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
            $line_items = $order_wrapper->commerce_line_items->value();

            foreach ($line_items as $line_item) {
              if($line_item->type == 'product' || $line_item->type == 'book' || $line_item->type == 'limited_edition') {
                $product_id = $line_item->commerce_product['und'][0]['product_id'];
                $product = commerce_product_load($product_id);
                $node_product_id = $line_item->data['context']['entity']['entity_id'];
                $node_product = node_load($node_product_id);
                $node_artist_id = $node_product->field_artist['und'][0]['nid'];
                $node_artist = node_load($node_artist_id);
                $product_price = (int) $line_item->commerce_total['und'][0]['data']['components'][0]['price']['amount'];

                $detail = flg_commerce_art_detail($node_product, true, true);
                $description = implode("<br /> ", $detail);
                $filepath = $node_product->field_art_image['und'][0]['uri'];
                $node_product_image = theme('image_style', array('style_name' => 'search-thumb', 'path' => $filepath));
                $replacements[$original] .= '<div style="width: 100%; overflow:hidden; margin-bottom:10px;">';
                $replacements[$original] .= '<div style="float:left; margin-right:15px;">' . $node_product_image . '</div>';
                $replacements[$original] .= '<div style="overflow:hidden;"><span style="text-transform: uppercase;">' . $node_artist->title . '</span><br/>' . $description . '<br/>';
                $replacements[$original] .= 'QUANTITY ' . (int) $line_item->quantity . '<br />';
                $replacements[$original] .= 'ARTWORK PRICE ' . commerce_currency_format($product_price, '') . ' </div></div>';
              }
            }

            $order_total = $order_wrapper->commerce_order_total->value();
            $base_price = '';
            $tax_price = '';
            $shipping_price = '';

            foreach ( $order_total['data']['components'] as $data) {
              if($data['name'] == 'base_price') {
                $base_price = commerce_currency_format((int) $data['price']['amount'], 'AUD');
              } elseif ($data['name'] == 'tax|gst') {
                $tax_price = commerce_currency_format((int) $data['price']['amount'], 'AUD');
              } elseif ($data['name'] == 'shipping') {
                $shipping_price = commerce_currency_format((int) $data['price']['amount'], 'AUD');
              }
            }

            $replacements[$original] .= !empty($tax_price) ? 'GST ' . $tax_price . '<br />': '' ;
            $replacements[$original] .= !empty($shipping_price) ? 'DELIVERY ' . $shipping_price  . '<br />': '';
            $replacements[$original] .= 'TOTAL ' . commerce_currency_format((int) $order_total['amount'], 'AUD') . ' AUD';
          break;
          case 'customer-billing-info':
            $replacements[$original] = 'Billing address:<br/>';
            try {
              $profile_id = $order->commerce_customer_billing['und'][0]['profile_id'];
              $replacements[$original] .= flg_commerce_address_info($profile_id, $order);
            } catch (\Throwable $th) {
            }
          break;
          case 'customer-shipping-info':
            $replacements[$original] = 'Shipping address:<br/>';
            try {
              $profile_id = $order->commerce_customer_shipping['und'][0]['profile_id'];
              $replacements[$original] .= flg_commerce_address_info($profile_id, $order);
            } catch (\Throwable $th) {
            }
          break;
          case 'view-order':
            $url = 'member-login';
            $replacements[$original] = url($url, array('absolute' => TRUE)) . '?destination=user/' . $order->uid . '/orders' . '/' . $order->order_number;
          break;

          case 'payment-method-information':
            $payment_method_information = '';
            $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
            if (!empty($payment_method) && !empty($payment_method['method_id'])) {
              $method_id = $payment_method['method_id'];
              $payment_method_title = commerce_payment_method_get_title('display_title', $method_id);
              if ($method_id = 'art_money') {
                $payment_method_information = '<p>Payment method: <span>'. t('You have opted to pay by @payment_method_title. We will contact you for payment.', array('@payment_method_title' => $payment_method_title)) . '</span><p>';
              }elseif($method_id == 'labuy') {
                $payment_method_information = '<p>Payment method: <span>'. t('You need completed @payment_method_title payment in 48 hours.', array('@payment_method_title' => $payment_method_title)) . '</span><p>';
              }elseif($method_id == 'direct_deposit') {
                $payment_method_information = '<p>Payment method: <span>'. t('You have opted to pay by @payment_method_title. Payment is required in 48 hours. We will contact you for payment.', array('@payment_method_title' => $payment_method_title)) . '</span><p>';
              }
              $replacements[$original] = $payment_method_information;
            }
            break;
        }
      }
    } catch (\Throwable $th) {
    }
  }
  return $replacements;
}

/**
 * callback art description
 */
function flg_commerce_art_detail($artNode, $cm = true,$hidePrice = false) {
  $detailArray = array();
  //year
  if(count($artNode->field_year)) {
    $year = format_date(strtotime($artNode->field_year['und'][0]['value']), 'year');
    $year = $node->title . ' ' . $year;
    array_push($detailArray, $year);
  }
  //medium
  $medium = $artNode->field_art_type['und'][0]['value'];
  array_push($detailArray, $medium);

  //dimensions
  $width = $artNode->field_width['und'][0]['value'];
  $height = $artNode->field_height['und'][0]['value'];
  $depth = $artNode->field_depth['und'][0]['value'];

  if($cm){
    $size =   $height . 'cm x ' . $width . 'cm';
  }else{
    //$size = round((0.393700787 * $height),2) . 'cm x ' . round((0.393700787 * $width), 2) . 'cm';
    $size =   $height . 'cm x ' . $width . 'cm';
  }
  
  if(isset($depth)) {
    $size .= ' ' . $depth;
  }
  array_push($detailArray, $size);
  if($hidePrice == false){
    //price
    if(count($artNode->field_art_price )){
      if(count($artNode->field_sale_status) == 0) {
        $price = '$' . number_format($artNode->field_art_price['und'][0]['value']) . ' AUD';
        array_push($detailArray, $price);
      } else {
        if($artNode->field_sale_status['und'][0]['tid'] == '27') {
          $price = 'Sold';
          array_push($detailArray, $price);
        }
        if($artNode->field_sale_status['und'][0]['tid'] == '29') {
          $price = 'NFS';
          array_push($detailArray, $price);
        }
        if($artNode->field_sale_status['und'][0]['tid'] == '28') {
          $price = 'POA';
          array_push($detailArray, $price);
        }
        if($artNode->field_sale_status['und'][0]['tid'] == '32') {
          $price = '$' . number_format($artNode->field_art_price['und'][0]['value']) . ' AUD';
          array_push($detailArray, $price);
        }
      }
    }
  }
  return $detailArray;
}

/**
 * callback flg_commerce_address_info
 */
function flg_commerce_address_info($profile_id, $order) {
  $customer_shipping_profile_data = commerce_customer_profile_load($profile_id);
  $info = '';

  if($customer_shipping_profile_data) {
    $customer_address = $customer_shipping_profile_data->commerce_customer_address['und'][0];
    $info .= $customer_address['name_line'] . '<br>';
    $info .= $customer_address['thoroughfare'] . ' ' . $customer_address['premise'] . '<br>';
    $info .= $customer_address['locality'] . ' ' . $customer_address['postal_code'] . '<br>';
    $info .= $customer_address['administrative_area'] . '<br>';
    $info .= $order->mail . '<br>';

    return $info;
  }
}

/**
 * hook hook_commerce_price_formatted_components_alter
 */
function flg_commerce_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  $components['base_price']['price']['amount'] = $components['commerce_price_formatted_amount']['price']['amount'] - round( (int) $components['tax|installation_fee']['price']['amount'] / 0.9) - (int) $components['shipping']['price']['amount'];
}
/**
 * Implements template_preprocess_mimemail_message().
 * Add logo and contact info for some email.
 */
function flg_commerce_preprocess_mimemail_message(&$variables) {
  $module = $variables['module'];
  $key = $variables['key'];
  $keys_allowed = array(
    'commerce-billy-send-order-invoice',
    'rules-checkout-completed-email',
    'rules-update-commerce-order-expired-mail',
  );
  if (in_array($key, $keys_allowed)) {
    $theme = mailsystem_get_mail_theme();
    $themepath = drupal_get_path('theme', $theme);
    $logo_url = theme_get_setting('logo', $theme);
    $header = '<p style="text-align:center;max-width: 470px;">'.theme('image', array('path' => $uri)).'</p>';
    $footer = '<p style="max-width: 320px;">If you have any questions please do not hesitate to<br/> contact us on info@flg.com.au or call <span style="display:inline-block"> 61 3 96543332</span></p>
<p style="font-size: 11px;font-weight: bold;text-align: center;margin-top: 50px;max-width: 470px;">Level 1 The Nicholas Building, comer Flinders Lane & 37 Swanston St MELBOURNE 3000<br/>Established 1989 &nbsp;&nbsp; WWW.FLG.COM.AU  &nbsp;&nbsp;  INFO@FLG.COM.AU &nbsp; <span style="display:inline-block">+  61 3 96543332</span></p>';
    $variables['body'] = $header . $variables['body'] . $footer;
  }
}




