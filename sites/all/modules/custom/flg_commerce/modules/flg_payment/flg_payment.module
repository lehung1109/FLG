<?php

/**
 * @file
 * Provides payments method for Drupal Commerce
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function flg_payment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['direct_deposit'] = array(
    'title' => t('Direct Deposit'),
    'description' => '',
    'active' => TRUE,
  );

  $payment_methods['art_money'] = array(
    'title' => t('Art money'),
    'description' => '',
    'active' => TRUE,
  );

  $payment_methods['labuy'] = array(
    'title' => t('Labuy'),
    'description' => '',
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_cron
 */
function flg_payment_cron() {
  try {
    $orders = commerce_order_load_multiple(array(), array('status' => array('labuy', 'art_money', 'direct_deposit')), TRUE);

    foreach($orders as $order) {
      if(time() - $order->created >= 48 * 60 * 60) {
        $order_updated = commerce_order_status_update($order, 'payment_expire');
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $line_items = $order_wrapper->commerce_line_items->value();
    
        // check line item is product
        foreach ($line_items as $line_item) {
          if($line_item->type == 'product' || $line_item->type == 'book' || $line_item->type == 'limited_edition') {
            if (!commerce_ss_product_type_enabled($line_item->type)) {
              $product_id = $line_item->commerce_product['und'][0]['product_id'];
              $product = commerce_product_load($product_id);
              $wrapper_product = entity_metadata_wrapper('commerce_product', $product);

              // calc total stock for revert
              $stock_in_order = $line_item->quantity;
              $current_stock = $wrapper_product->commerce_stock->value();
              $total_stock = (int) $stock_in_order + (int) $current_stock;

              // save stock for product
              $wrapper_product->commerce_stock->set($total_stock);
              $result = $wrapper_product->save();
            }
          }
        }
      }
    }

    watchdog('flg_payment', 'cron run success');
  } catch (\Throwable $th) {
    watchdog('flg_payment', 'cron run error !mess', array('!mess' => $th->getMessage()));
  }
}
