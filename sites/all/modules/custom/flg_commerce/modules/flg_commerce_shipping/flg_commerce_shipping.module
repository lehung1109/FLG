<?php

/**
 * @file
 * Defines an shipping method.
 */

/**
 * Implements hook_menu().
 */
function flg_commerce_shipping_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/postcode'] = array(
    'title' => 'Postcode Range',
    'description' => 'Manage postcode.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flg_commerce_shipping_postcode_form'),
    'access arguments' => array('administer shipping'),
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/config/shipping/postcode/progress/%'] = array(
    'title' => t('Import progress'),
    'page callback' => 'flg_commerce_shipping_postcode_form_progress',
    'page arguments' => array(
      6,
    ),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Postcode argument callbacks.
 */
function flg_commerce_shipping_postcode_form($form, &$form_state) {
  $form_state['time'] = REQUEST_TIME;

  // We make a DIV which the progress bar can occupy. You can see this in use
  // in ajax_example_progressbar_callback().
  $form['status'] = array(
    '#markup' => '<div id="progress-status"></div>',
  );

  $form['postcode_fieldset'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Postcode Range'),
    '#weight'       => 0,
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );

  // get postcode range data
  $header = array('Postcode Range', 'Locality', 'Price');
  $rows = array();
  $result = db_select('postcode_shipping', 'p')
  ->fields('p')
  ->execute()
  ->fetchAll(PDO::FETCH_ASSOC);

  if(!empty($result)) {
    foreach($result as $data) {
      $rows[] = array(
        $data['postcode'],
        $data['local'],
        $data['price']
      );
    }
  }

  // create table with pager
  if (!empty($rows)) {
    $limit = 30;
    $page = pager_default_initialize(count($rows), $limit, 0);
    $offset = $limit * $page;
    $output = array(
      array(
        '#type' => 'markup',
        '#markup' => theme('table', array('header' => $header, 'rows' => array_slice($rows, $offset, $limit))),
      ),
      array(
        '#theme' => 'pager',
      ),
    );
  }

  $form['postcode_fieldset']['postcode_shipping'] = array(
    '#type' => 'item',
    '#markup' => render($output),
    '#weight' => 0,
  );

  $form['postcode_upload'] = array(
    '#type' => 'file',
    '#title' => t('input text'),
    '#size' => 60, 
  );

  $form['postcode_import'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#weight' => 2,
    '#ajax' => array(
      'progress' => array(
        'type' => 'bar',
        'url' => url('admin/commerce/config/shipping/postcode/progress/' . $form_state['time']),
        'message' => t('Importing...'),
        'interval' => '1000'
      ),
      'wrapper' => 'progress-status',
      'callback' => 'flg_commerce_shipping_postcode_form_callback',
    )
  );
  return $form;
}

/**
 * get progress percentage
 */
function flg_commerce_shipping_postcode_form_progress($time) {
  $progress = array(
    'message' => t('Starting execute...'),
    'percentage' => -1,
  );

  $completed_percentage = variable_get('example_progressbar_' . $time, 0);

  if ($completed_percentage) {
    $progress['message'] = t('Executing...');
    $progress['percentage'] = $completed_percentage;
  }

  drupal_json_output($progress);
}

/**
 * Menu callback for AJAX additions. Import postcode range
 */
function flg_commerce_shipping_postcode_form_callback($form, $form_state) {
  if($_FILES['files']['tmp_name']['postcode_upload']) {
    $handle = fopen($_FILES['files']['tmp_name']['postcode_upload'], 'r');

    if($handle !== FALSE) {
      $variable_name = 'example_progressbar_' . $form_state['time'];
      $commands = array();

      db_query("DELETE FROM {postcode_shipping} WHERE 1");
      $header = fgetcsv($handle, 0);

      // get index for each item
      foreach($header as $index => $value) {
        switch ($value) {
          case 'postcode':
            $postcode_index = $index;
            break;
          case 'locality':
            $local_index = $index;
            break;
          case 'cost':
            $price_index = $index;
            break;
          default:
            break;
        }
      }

      $i = 0;
      while(1) {
        $i++;
        $row = fgetcsv($handle, 0);

        if($i % 100 === 0) {
          variable_set($variable_name, min( round( ( ftell( $handle ) / filesize( $_FILES['files']['tmp_name']['postcode_upload'] ) ) * 100 ), 100 ) );
          sleep(1);
        }

        if($row !== FALSE) {
          $postcode = $row[0];
          db_insert('postcode_shipping')
          ->fields(array(
            'price' => $row[$price_index],
            'local' => $row[$local_index],
            'postcode' => $row[$postcode_index],
          ))
          ->execute();
        } else {
          break;
        }
      }

      variable_del($variable_name);

      return  '<div id="console" class="clearfix"><div class="messages status messageclose-processed"><a href="#" class="messageclose" title="close">Ã—</a><h2 class="element-invisible">Status message</h2>Executed.</div></div>';
    }

    return;
  }
  return;
}

/**
 * Implements hook_commerce_shipping_service_info
 */
function flg_commerce_shipping_commerce_shipping_service_info()
{
  $shipping_services = array();

  $shipping_services['flat_rate_shipping_service'] = array(
    'title' => t('Shipping'),
    'description' => t(''),
    'display_title' => t('Shipping'),
    'shipping_method' => 'flat_rate',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'flg_commerce_shipping_flat_rate_shipping_service_rate',
    ),
  );

  return $shipping_services;
}

/**
 * Flat rate service callbacks
 * 
 * Returns a base price array for a shipping service
 * calculated for the given order.
 */
function flg_commerce_shipping_flat_rate_shipping_service_rate($shipping_service, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $customer_shipping_profile_id = $order_wrapper->commerce_customer_shipping->profile_id->value();
  $customer_shipping_profile_data = commerce_customer_profile_load($customer_shipping_profile_id);
  $customer_shipping_profile_locality = $customer_shipping_profile_data->commerce_customer_address['und'][0]['locality'];
  $customer_shipping_profile_postcode = $customer_shipping_profile_data->commerce_customer_address['und'][0]['postal_code'];

  // get shipping price base locality and postcode
  $price = flg_commerce_shipping_get_price($customer_shipping_profile_locality, $customer_shipping_profile_postcode);

  if(empty($price)) {
    return FALSE;
  } else {
    return array(
      'amount' => $price,
      'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
      'data' => array(),
    );
  }
}

/**
 * get price base on locality and postcode
 */
function flg_commerce_shipping_get_price($locality, $postcode) {
  $result = db_select('postcode_shipping', 'p')
  ->fields('p')
  ->condition('local', $locality,'=')
  ->condition('postcode', $postcode,'=')
  ->execute()
  ->fetchAll(PDO::FETCH_ASSOC);

  if(empty($result[0]['price'])) {
    return FALSE;
  } else {
    return $result[0]['price'];
  }
}
