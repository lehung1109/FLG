<?php

/**
 * @file
 * Defines an shipping method.
 */

/**
 * Implements hook_menu().
 */
function flg_commerce_shipping_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/postcode'] = array(
    'title' => 'Postcode Range',
    'description' => 'Manage postcode.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flg_commerce_shipping_postcode_form'),
    'access arguments' => array('administer shipping'),
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/config/shipping/postcode/progress/%'] = array(
    'title' => t('Import progress'),
    'page callback' => 'flg_commerce_shipping_postcode_form_progress',
    'page arguments' => array(
      6,
    ),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/config/shipping/quote'] = array(
    'title' => 'Shipping Quote',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flg_commerce_shipping_quote'),
    'access arguments' => array('administer shipping'),
    'weight' => 16,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * shipping quote callbacks.
 */
function flg_commerce_shipping_quote($form, &$form_state) {
  $form['shipping_quote'] = array(
    '#type' => 'textarea',
    '#default_value' => variable_get('shipping_quote')
  );

  return system_settings_form($form);
}

/**
 * Postcode argument callbacks.
 */
function flg_commerce_shipping_postcode_form($form, &$form_state) {
  $form_state['time'] = REQUEST_TIME;

  // We make a DIV which the progress bar can occupy. You can see this in use
  // in ajax_example_progressbar_callback().
  $form['status'] = array(
    '#markup' => '<div id="progress-status"></div>',
  );

  $form['postcode_fieldset'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Postcode Range'),
    '#weight'       => 0,
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );

  // get postcode range data
  $header = array('Postcode Range', 'Locality', 'Price');
  $rows = array();
  $result = db_select('postcode_shipping', 'p')
  ->fields('p')
  ->execute()
  ->fetchAll(PDO::FETCH_ASSOC);

  if(!empty($result)) {
    foreach($result as $data) {
      $rows[] = array(
        $data['postcode'],
        $data['local'],
        $data['price']
      );
    }
  }

  // create table with pager
  if (!empty($rows)) {
    $limit = 30;
    $page = pager_default_initialize(count($rows), $limit, 0);
    $offset = $limit * $page;
    $output = array(
      array(
        '#type' => 'markup',
        '#markup' => theme('table', array('header' => $header, 'rows' => array_slice($rows, $offset, $limit))),
      ),
      array(
        '#theme' => 'pager',
      ),
    );
  }

  $form['postcode_fieldset']['postcode_shipping'] = array(
    '#type' => 'item',
    '#markup' => render($output),
    '#weight' => 0,
  );

  $form['postcode_upload'] = array(
    '#type' => 'file',
    '#title' => t('input text'),
    '#size' => 60, 
  );

  $form['postcode_import'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#weight' => 2,
    '#ajax' => array(
      'progress' => array(
        'type' => 'bar',
        'url' => url('admin/commerce/config/shipping/postcode/progress/' . $form_state['time']),
        'message' => t('Importing...'),
        'interval' => '1000'
      ),
      'wrapper' => 'progress-status',
      'callback' => 'flg_commerce_shipping_postcode_form_callback',
    )
  );
  return $form;
}

/**
 * get progress percentage
 */
function flg_commerce_shipping_postcode_form_progress($time) {
  $progress = array(
    'message' => t('Starting execute...'),
    'percentage' => -1,
  );

  $completed_percentage = variable_get('example_progressbar_' . $time, 0);

  if ($completed_percentage) {
    $progress['message'] = t('Executing...');
    $progress['percentage'] = $completed_percentage;
  }

  drupal_json_output($progress);
}

/**
 * Menu callback for AJAX additions. Import postcode range
 */
function flg_commerce_shipping_postcode_form_callback($form, $form_state) {
  if($_FILES['files']['tmp_name']['postcode_upload']) {
    $handle = fopen($_FILES['files']['tmp_name']['postcode_upload'], 'r');

    if($handle !== FALSE) {
      $variable_name = 'example_progressbar_' . $form_state['time'];
      $commands = array();

      db_query("DELETE FROM {postcode_shipping} WHERE 1");
      $header = fgetcsv($handle, 0);

      // get index for each item
      foreach($header as $index => $value) {
        switch ($value) {
          case 'postcode':
            $postcode_index = $index;
            break;
          case 'locality':
            $local_index = $index;
            break;
          case 'cost':
            $price_index = $index;
            break;
          default:
            break;
        }
      }

      $i = 0;
      while(1) {
        $i++;
        $row = fgetcsv($handle, 0);

        if($i % 100 === 0) {
          variable_set($variable_name, min( round( ( ftell( $handle ) / filesize( $_FILES['files']['tmp_name']['postcode_upload'] ) ) * 100 ), 100 ) );
          sleep(1);
        }

        if($row !== FALSE) {
          $postcode = $row[0];
          db_insert('postcode_shipping')
          ->fields(array(
            'price' => $row[$price_index],
            'local' => $row[$local_index],
            'postcode' => $row[$postcode_index],
          ))
          ->execute();
        } else {
          break;
        }
      }

      variable_del($variable_name);

      return  '<div id="console" class="clearfix"><div class="messages status messageclose-processed"><a href="#" class="messageclose" title="close">Ã—</a><h2 class="element-invisible">Status message</h2>Executed.</div></div>';
    }

    return;
  }
  return;
}

/**
 * Implements hook_commerce_shipping_service_info
 */
function flg_commerce_shipping_commerce_shipping_service_info()
{
  $shipping_services = array();

  $shipping_services['flat_rate_shipping_service'] = array(
    'title' => t('Shipping'),
    'description' => t(''),
    'display_title' => t('Shipping'),
    'shipping_method' => 'flat_rate',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'flg_commerce_shipping_flat_rate_shipping_service_rate',
    ),
  );

  $shipping_services['pickup_in_store'] = array(
    'title' => t('Pick up at Gallery'),
    'description' => t(''),
    'display_title' => t('Pick up at Gallery'),
    'shipping_method' => 'flat_rate',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'flg_commerce_shipping_pickup_in_store_rate',
    ),
  );

  $shipping_services['free_shipping'] = array(
    'title' => t('Free Shipping'),
    'description' => t(''),
    'display_title' => t('Free Shipping'),
    'shipping_method' => 'flat_rate',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'flg_commerce_shipping_free_shipping_rate',
    ),
  );

  return $shipping_services;
}

/**
 * Pick up in store callbacks
 * 
 * Returns a base price array for a shipping service
 * calculated for the given order.
 */
function flg_commerce_shipping_pickup_in_store_rate($shipping_service, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  return array(
    'amount' => 0000,
    'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
    'data' => array(),
  );
}

/**
 * Flat rate service callbacks
 * 
 * Returns a base price array for a shipping service
 * calculated for the given order.
 */
function flg_commerce_shipping_flat_rate_shipping_service_rate($shipping_service, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $customer_shipping_profile_id = $order_wrapper->commerce_customer_shipping->profile_id->value();
  $customer_shipping_profile_data = commerce_customer_profile_load($customer_shipping_profile_id);
  $customer_shipping_profile_locality = $customer_shipping_profile_data->commerce_customer_address['und'][0]['locality'];
  $customer_shipping_profile_postcode = $customer_shipping_profile_data->commerce_customer_address['und'][0]['postal_code'];
  $data = array();

  // get shipping price base locality and postcode
  $price = flg_commerce_shipping_get_price($customer_shipping_profile_locality, $customer_shipping_profile_postcode);
  $product_type = flg_commerce_shipping_get_shipping_type($order_wrapper->commerce_line_items->value());
  $exhibition_ids = flg_commerce_get_referencing_node_id($order_wrapper->commerce_line_items->value());

  if(empty($price) || !empty($product_type)) {
    $data['shipping'] = 'quote';
    $price = 0;
  }

  if(!empty($exhibition_ids)) {
    $data['exhibition'] = $exhibition_ids;
  }

  if($order_wrapper->commerce_order_total->amount->value() >= 1000000) {
    $price = 0;
  }

  return array(
    'amount' => $price,
    'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
    'data' => $data,
  );
}

/**
 * Free Shipping service callbacks
 */
function flg_commerce_shipping_free_shipping_rate($shipping_service, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if($order_wrapper->commerce_order_total->amount->value() >= 1000000) {
    return array(
      'amount' => '0000',
      'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
      'data' => array(),
    );
  }
}

/**
 * get price base on locality and postcode
 */
function flg_commerce_shipping_get_price($locality, $postcode) {
  $result = db_select('postcode_shipping', 'p')
  ->fields('p')
  ->condition('local', $locality,'=')
  ->condition('postcode', $postcode,'=')
  ->execute()
  ->fetchAll(PDO::FETCH_ASSOC);

  if(empty($result[0]['price'])) {
    return FALSE;
  } else {
    return $result[0]['price'] * 100;
  }
}

/**
 * get node by product id
 */
function flg_commerce_get_referencing_node_id($line_items) {
  foreach ($line_items as $line_item) {
    if($line_item->type == 'product') {
      $node_id = $line_item->data['context']['entity']['entity_id'];
      $results = db_select('field_data_field_art_showcase', 'e')
      ->condition('field_art_showcase_target_id', $node_id)
      ->fields('e', array('entity_id'))
      ->execute()
      ->fetchAll(PDO::FETCH_ASSOC);
      $exhibition_ids = array();

      if(!empty($results)) {
        foreach ($results as $result) {
          $node_exhibition = node_load($result['entity_id']);

          if(!empty($node_exhibition->field_exibition_date['und'][0]['value2']) && time() < (strtotime($node_exhibition->field_exibition_date['und'][0]['value2']) + 86400) || empty($node_exhibition->field_exibition_date['und'][0]['value2'])) {
            $exhibition_ids[$node_id] = $result['entity_id'];
          }
        }
      }

      return $exhibition_ids;
    }
  }
}

/**
 * get shipping type product
 */
function flg_commerce_shipping_get_shipping_type($line_items) {
  foreach ($line_items as $line_item) {
    if($line_item->type == 'product' || $line_item->type == 'book' || $line_item->type == 'limited_edition') {
      $node_id = $line_item->data['context']['entity']['entity_id'];
      $node = node_load($node_id);

      if(!empty($node->field_shipping_type) && !empty($node->field_shipping_type['und'][0]['value'])) {
        return $node->field_shipping_type['und'][0]['value'];
      }
    }
  }
}

/**
 * @hook hook_form_alter()
 */
function flg_commerce_shipping_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $user_id = $user->uid;
  $order = commerce_cart_order_load($user_id);
  if(!empty($order)) $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  try {
    switch ($form_id) {
      case 'commerce_checkout_form_shipping':
        $form['commerce_shipping']['shipping_service']['#options']['pickup_in_store'] = t('Pick up at Gallery');
        $price = (float) $order->shipping_rates['flat_rate_shipping_service']->commerce_unit_price['und'][0]['amount'];
        $form['commerce_shipping']['shipping_service']['#title'] = '';

        if(isset($order->shipping_rates['flat_rate_shipping_service']->commerce_unit_price['und'][0]['data']['exhibition'])) {
          $exhibition_ids = $order->shipping_rates['flat_rate_shipping_service']->commerce_unit_price['und'][0]['data']['exhibition'];
          foreach($exhibition_ids as $art_id => $exhibition_id) {
            $node_exhibition = node_load($exhibition_id);
            $node_art = node_load($art_id);
            $form['commerce_shipping']['shipping_service']['#title'] .= l($node_art->title, 'node/' . $art_id) . ' is being exhibited on ' . l($node_exhibition->title, 'node/' . $exhibition_id);
          }
        }

        if(!empty($form['commerce_shipping']['shipping_service']['#title'])) {
          $form['commerce_shipping']['shipping_service']['#title'] .= '<br />Your order it will not be shipped till exhibition ends. After exhibittion ends';
        }
  
        if(isset($order->shipping_rates['flat_rate_shipping_service']->commerce_unit_price['und'][0]['data']['shipping']) && $price === (float) 0) {
          $form['commerce_shipping']['shipping_service']['#options']['flat_rate_shipping_service'] = variable_get('shipping_quote');
        }

        // only show free shipping and hidden shipping method other
        if(isset($form['commerce_shipping']['shipping_service']['#options']['free_shipping'])) {
          $form['commerce_shipping']['shipping_service']['#options'] = array('free_shipping' => 'Free Shipping', 'pickup_in_store' => 'Pick up at Gallery');
          $form['commerce_shipping']['shipping_service']['#default_value'] = 'free_shipping';
        }
        break;
  
      case 'commerce_checkout_form_delivery_pick_up':
        $commerce_line_items = $order_wrapper->commerce_line_items->value();
        $checkout_page_id = substr($form_id, 23);

        // ajax postcode for calc installation fee
        $form['customer_profile_shipping']['commerce_customer_address']['und'][0]['locality_block']['postal_code']['#ajax'] = array(
          'callback' => 'flg_commerce_shipping_postal_code_callback',
          'wrapper' => 'js-replace_post_code',
          'method' => 'replace',
          'effect' => 'fade',
        );

        // create installation fee checkbox for user checkbox
        $form['replace_post_code']['#markup'] = '<div id="js-replace_post_code"></div>';
        $form['replace_post_code']['#weight'] = '98';
        $form['buttons']['#weight'] = '100';
        $form['installation_fee'] = array(
          '#type' => 'fieldset',
          '#title' => t('Installation Fee'),
          '#weight' => 99,
        );
        $form['buttons']['continue']['#submit'][] = 'flg_commerce_shipping_installation_fee_submit';

        // show option installation fee for each product
        foreach ($commerce_line_items as $line_item) {
          $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
          if($line_item_wrapper->getBundle() == 'product' && $line_item_wrapper->commerce_product->getBundle() == 'product') {
            $node_id = $line_item->data['context']['entity']['entity_id'];
            $node = node_load($node_id);

            // get default value
            $installation_fee = !empty($order->data['installation_fee']) ? $order->data['installation_fee'] : array();
            $installation_fee_value = in_array($line_item->line_item_id, $installation_fee) ? $line_item->line_item_id : 0;
            $form['installation_fee']['installation_fee_' . $line_item->line_item_id] = array(
              '#type' => 'radios',
              '#title' => t('Installation Fee for ' . $node->title . ': $90 x 1'),
              '#default_value' => $installation_fee_value,
              '#options' => array($line_item->line_item_id => '$' . (90 * round($line_item->quantity)) . ' Installation Fee', 0 => '$0 I will install myself'),
            );
          }
        }

        if($user->uid === 0) break;

        foreach (commerce_checkout_panes(array('enabled' => TRUE, 'page' => $checkout_page_id)) as $pane_id => $checkout_pane) {
          if($pane_id == 'customer_profile_shipping') {
            $field = field_info_field('commerce_customer_shipping');
            $profiles = commerce_customer_profile_load_multiple(array(), array('type' => 'shipping', 'uid' => $user->uid, 'status' => TRUE));
  
            if($profiles) {
              $profiles = array_pop($profiles);
              $form['customer_profile_shipping']['commerce_customer_address']['und'][0]['#address'] = $profiles->commerce_customer_address['und'][0];
            }
          }
        }
        break;

      case 'commerce_checkout_form_account':
        $form['account_form']['#title'] = t('Login, Register or Guest checkout');
        $form['account_form']['select']['register']['mail']['#description'] = 'All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news as part of our mailing list or notifications by e-mail. By registering, you are accepting to join our mailing list.';
        break;

      default:
        break;
    }
  } catch (\Throwable $th) {
    //throw $th;
  }
}

function flg_commerce_shipping_installation_fee_submit($form, &$form_state) {
  global $user;
  $user_id = $user->uid;
  $order = commerce_cart_order_load($user_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $commerce_line_items = $order_wrapper->commerce_line_items->value();
  $order->data['installation_fee'] = array();

  // save commerce_line_items for installation fee
  foreach ($commerce_line_items as &$line_item) {
    if($line_item->type == 'product' || $line_item->type == 'book' || $line_item->type == 'limited_edition') {
      if(isset($form_state['values']['installation_fee_' . $line_item->line_item_id])) {
        $order->data['installation_fee'][] = $form_state['values']['installation_fee_' . $line_item->line_item_id];
      }
    }
  }

  commerce_order_save($order);
}

/**
 * Callback element needs only select the portion of the form to be updated.
 * Since #ajax['callback'] return can be HTML or a renderable array (or an
 * array of commands), we can just return a piece of the form.
 */
function flg_commerce_shipping_postal_code_callback($form, $form_state) {
  $postal_code = $form_state['values']['customer_profile_shipping']['commerce_customer_address']['und'][0]['postal_code'];

  if(is_numeric($postal_code) && $postal_code >= 3000 || $postal_code <= 3207) {
    global $user;
    $user_id = $user->uid;
    $order = commerce_cart_order_load($user_id);
    if(!empty($order)) $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $commerce_line_items = $order_wrapper->commerce_line_items->value();
  }

  // create installation fee checkbox for user checkbox
  $form['replace_post_code']['#markup'] = '<div id="js-replace_post_code"></div>';
  $form['replace_post_code']['#weight'] = '98';
  $form['buttons']['#weight'] = '100';
  $form['installation_fee'] = array(
    '#type' => 'fieldset',
    '#title' => t('Installation Fee'),
    '#weight' => 99,
  );
  $form['buttons']['continue']['#submit'][] = 'flg_commerce_shipping_installation_fee_submit';

  // show option installation fee for each product
  foreach ($commerce_line_items as $line_item) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    if($line_item_wrapper->getBundle() == 'product' && $line_item_wrapper->commerce_product->getBundle() == 'product') {
      $node_id = $line_item->data['context']['entity']['entity_id'];
      $node = node_load($node_id);

      // get default value
      $installation_fee = !empty($order->data['installation_fee']) ? $order->data['installation_fee'] : array();
      $installation_fee_value = in_array($line_item->line_item_id, $installation_fee) ? $line_item->line_item_id : 0;
      $form['installation_fee']['installation_fee_' . $line_item->line_item_id] = array(
        '#type' => 'radios',
        '#title' => t('Installation Fee for ' . $node->title . ': $90 x 1'),
        '#default_value' => $installation_fee_value,
        '#options' => array($line_item->line_item_id => '$' . (90 * round($line_item->quantity)) . ' Installation Fee', 0 => '$0 I will install myself'),
      );
    }
  }
  return $form['installation_fee'];
}

