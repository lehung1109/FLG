<?php

 function inline_entity_form_rendered_field_widget_info() {
 $info['inline_entity_form_rendered'] = array(
 'label' => t('Inline entity form - Rendered inline'),
 'field types' => array('entityreference'),
 'settings' => array(
 'fields' => array(),
 'type_settings' => array(),
 'view_mode' => 'teaser',
 ),
 'weight' => 10,
 );

 return $info;
 }

 function inline_entity_form_rendered_settings($field, $instance) {
 return inline_entity_form_settings($field, $instance) + $instance['widget']['settings'];
 }

 function inline_entity_form_rendered_field_widget_settings_form($field, $instance) {
 $settings = inline_entity_form_rendered_settings($field, $instance);
 $element = inline_entity_form_field_widget_settings_form($field, $instance);

 $info = entity_get_info($settings['entity_type']);
 $element['view_mode'] = array(
 '#type' => 'select',
 '#title' => t('View mode for entity display in widget'),
 '#options' => inline_entity_form_rendered_get_view_mode_options($settings['entity_type']),
 '#default_value' => $settings['view_mode'],
 );

 // Remove the deprecated setting for deleting refereneced items.
 if (isset($element['type_settings']['delete_references'])) {
 $element['type_settings']['delete_references'] = array(
 '#type' => 'value',
 '#value' => 0,
 );
 }

 return $element;
 }

 function inline_entity_form_rendered_get_view_mode_options($entity_type) {
 $info = entity_get_info($entity_type);
 $options = array();
 foreach ($info['view modes'] as $key => $view_mode) {
 $options[$key] = $view_mode['label'];
 }
 return $options;
 }

 function inline_entity_form_rendered_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
 $settings = inline_entity_form_rendered_settings($field, $instance);
 $entity_type = $settings['entity_type'];
 $entity_info = entity_get_info($entity_type);

 // Check that the controller is valid.
 $controller = inline_entity_form_get_controller($instance);
 if (!$controller) {
 return array();
 }

 // Get the entity type labels for the UI strings.
 $labels = $controller->labels();

 // Build a parents array for this element's values in the form.
 $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));

 // Get the langcode of the parent entity.
 $parent_langcode = entity_language($element['#entity_type'], $element['#entity']);

 // Assign a unique identifier to each IEF widget.
 $ief_id = $instance['id'];

 // Determine the wrapper ID for the entire element.
 $wrapper = 'inline-entity-form-' . $ief_id . '-' . $delta;

 $element += array(
 '#type' => 'container',
 '#tree' => TRUE,
 '#attributes' => array('id' => $wrapper),
 '#ief_id' => $ief_id,
 '#ief_root' => TRUE,
 );

 // Initialize the IEF array in form state.
 if (empty($form_state['inline_entity_form'][$ief_id])) {
 $form_state['inline_entity_form'][$ief_id] = array(
 'form' => NULL,
 'settings' => $settings,
 'instance' => $instance,
 );

 // Load the entities from the $items array and store them in the form
 // state for further manipulation.
 $form_state['inline_entity_form'][$ief_id]['entities'] = array();
 $entity_ids = array();
 foreach ($items as $item_delta => $item) {
 $entity_ids[$item_delta] = $item[$settings['column']];
 }
 $entities = entity_load($entity_type, $entity_ids);

 foreach ($items as $item_delta => $item) {
 $form_state['inline_entity_form'][$ief_id]['entities'][$item_delta] = array(
 'entity' => $entities[$entity_ids[$item_delta]],
 'weight' => $item_delta,
 'form' => NULL,
 'needs_save' => FALSE,
 );
 }
 }

 $element[$settings['column']] = array(
 '#type' => 'value',
 '#value' => !empty($items[$delta][$settings['column']]) ? $items[$delta][$settings['column']] : NULL,
 );
 if (!empty($form_state['inline_entity_form'][$ief_id]['entities'][$delta])) {
 $value = $form_state['inline_entity_form'][$ief_id]['entities'][$delta];

 if (!empty($value['form'])) {
 $element['form'] = array(
 '#type' => 'container',
 '#attributes' => array('class' => array('ief-form', 'ief-form-row')),
 '#op' => $value['form'],
 // Used by Field API and controller methods to find the relevant
 // values in $form_state.
 '#parents' => array_merge($parents, array($delta, 'form')),
 // Store the entity on the form, later modified in the controller.
 '#entity' => $value['entity'],
 '#entity_type' => $settings['entity_type'],
 // Pass the langcode of the parent entity,
 '#parent_language' => $parent_langcode,
 // Identifies the IEF widget to which the form belongs.
 '#ief_id' => $ief_id,
 // Identifies the table row to which the form belongs.
 '#ief_row_delta' => $delta,
 );
 $form = &$element['form'];

 switch ($value['form']) {
 case 'edit':
 $form += inline_entity_form_entity_form($controller, $form, $form_state);
 $form['#pre_render'] = array(' _field_extra_fields_pre_render');
 $form['actions']['ief_edit_save']['#ajax']['wrapper'] = $wrapper;
 $form['actions']['ief_edit_cancel']['#ajax']['wrapper'] = $wrapper;
 dpm($form);
 break;

 case 'remove':
 $form += inline_entity_form_remove_form($controller, $form, $form_state);
 break;
 }
 }
 else {
 $element['entity'] = array(
 '#type' => 'container',
 '#attributes' => array(
 'style' => 'float:left; width: 80%;',
 ),
 //'#markup' => render($build),
 );
 $entity = $value['entity'];
 list($entity_id) = entity_extract_ids($entity_type, $entity);
 $rendered = inline_entity_form_rendered_get_entity_output($entity_type, $entity, $settings['view_mode']);
 $element['entity']['output']['#markup'] = $rendered;

 $element['actions'] = array(
 '#type' => 'actions',
 '#attributes' => array(
 'style' => 'float: right; width: 20%; text-align: right;',
 ),
 '#weight' => -10,
 );
 $element['actions']['ief_entity_edit'] = array(
 '#type' => 'submit',
 '#value' => t('Edit'),
 '#name' => 'ief-' . $ief_id . '-entity-edit-' . $delta,
 '#limit_validation_errors' => array(),
 '#ajax' => array(
 'callback' => 'inline_entity_form_get_element',
 'wrapper' => $wrapper,
 ),
 '#submit' => array('inline_entity_form_open_row_form'),
 '#ief_row_delta' => $delta,
 '#ief_row_form' => 'edit',
 '#access' => !empty($entity_id) && entity_access('update', $controller->entityType(), $entity),
 );
 $element['actions']['ief_entity_remove'] = array(
 '#type' => 'submit',
 '#value' => t('Remove'),
 '#name' => 'ief-' . $ief_id . '-entity-remove-' . $delta,
 '#limit_validation_errors' => array(),
 '#ajax' => array(
 'callback' => 'inline_entity_form_get_element',
 'wrapper' => $wrapper,
 ),
 '#submit' => array('inline_entity_form_open_row_form'),
 '#ief_row_delta' => $delta,
 '#ief_row_form' => 'remove',
 '#access' => empty($entity_id) || $controller->getSetting('allow_existing') || entity_access('delete', $controller->entityType(), $entity),
 );
 }
 }
 else {
 if (empty($form_state['inline_entity_form'][$ief_id]['form'])) {
 $element['actions'] = array(
 '#type' => 'actions',
 );

 // The user is allowed to create an entity of at least one bundle.
 if (count($settings['create_bundles'])) {
 // Let the user select the bundle, if multiple are available.
 if (count($settings['create_bundles']) > 1) {
 $bundles = array();
 foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
 if (in_array($bundle_name, $settings['create_bundles'])) {
 $bundles[$bundle_name] = $bundle_info['label'];
 }
 }

 $element['actions']['bundle'] = array(
 '#type' => 'select',
 '#options' => $bundles,
 );
 }
 else {
 $element['actions']['bundle'] = array(
 '#type' => 'value',
 '#value' => reset($settings['create_bundles']),
 );
 }

 $element['actions']['ief_add'] = array(
 '#type' => 'submit',
 '#value' => t('Add new @type_singular', array('@type_singular' => $labels['singular'])),
 '#name' => 'ief-' . $ief_id . '-add',
 '#limit_validation_errors' => array(array_merge($parents, array('actions'))),
 '#ajax' => array(
 'callback' => 'inline_entity_form_get_element',
 'wrapper' => $wrapper,
 ),
 '#submit' => array('inline_entity_form_open_form'),
 '#ief_form' => 'add',
 );
 }

 $element['actions']['ief_add_existing'] = array(
 '#type' => 'submit',
 '#value' => t('Add existing @type_singular', array('@type_singular' => $labels['singular'])),
 '#name' => 'ief-' . $ief_id . '-add-existing',
 '#limit_validation_errors' => array(array_merge($parents, array('actions'))),
 '#ajax' => array(
 'callback' => 'inline_entity_form_get_element',
 'wrapper' => $wrapper,
 ),
 '#submit' => array('inline_entity_form_open_form'),
 '#ief_form' => 'ief_add_existing',
 '#access' => $controller->getSetting('allow_existing'),
 );
 }
 else {
 // There's a form open, show it.
 $element['form'] = array(
 '#type' => 'container',
 '#attributes' => array('class' => array('ief-form', 'ief-form-bottom')),
 // Identifies the IEF widget to which the form belongs.
 '#ief_id' => $ief_id,
 // Used by Field API and controller methods to find the relevant
 // values in $form_state.
 '#parents' => array_merge($parents, array('form')),
 // Pass the current entity type.
 '#entity_type' => $settings['entity_type'],
 // Pass the langcode of the parent entity,
 '#parent_language' => $parent_langcode,
 );

 if ($form_state['inline_entity_form'][$ief_id]['form'] == 'add') {
 $element['form']['#op'] = 'add';
 $element['form'] += inline_entity_form_entity_form($controller, $element['form'], $form_state);

 // Hide the cancel button if the reference field is required but
 // contains no values. That way the user is forced to create an entity.
 if (!$controller->getSetting('allow_existing') && $instance['required']
 && empty($form_state['inline_entity_form'][$ief_id]['entities'])
 && count($settings['create_bundles']) == 1) {
 $element['form']['actions']['ief_add_cancel']['#access'] = FALSE;
 }
 }
 elseif ($form_state['inline_entity_form'][$ief_id]['form'] == 'ief_add_existing') {
 $element['form'] += inline_entity_form_reference_form($controller, $element['form'], $form_state);
 }
 }
 }

 return $element;
 }

 /**
 * Implements hook_field_widget_error().
 */
 function inline_entity_form_rendered_field_widget_error($element, $error) {
 form_error($element, $error['message']);
 }

 function inline_entity_form_rendered_get_entity_output($entity_type, $entity, $view_mode) {
 list($entity_id) = entity_extract_ids($entity_type, $entity);
 $build = entity_view($entity_type, array($entity_id => $entity), $view_mode);
 $build = reset($build[$entity_type]);
 unset($build['links']);
 unset($build['#contextual_links']);
 $output = render($build);
 //$output = '<h2>' . check_plain($label) . '</h2>' . $output;
 $output = inline_entity_form_rendered_filter_out_links($output);
 return $output;
 }

 function inline_entity_form_rendered_filter_out_links($text) {
 return filter_xss($text, array('abbr', 'acronym', 'address', 'article', 'aside', 'b', 'bdi', 'bdo', 'big', 'blockquote', 'br', 'caption', 'cite', 'code', 'col', 'colgroup', 'command', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'figcaption', 'figure', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'i', 'img', 'ins', 'kbd', 'li', 'mark', 'menu', 'meter', 'nav', 'ol', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'small', 'span', 'strong', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'time', 'tr', 'tt', 'u', 'ul', 'var', 'wbr'));
 }
